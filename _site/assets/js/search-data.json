{"0": {
    "doc": "Pycharm 설치",
    "title": "Pycharm 설치",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Pycharm_%EC%84%A4%EC%B9%98/Pycharm_%EC%84%A4%EC%B9%98.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Pycharm_%EC%84%A4%EC%B9%98/Pycharm_%EC%84%A4%EC%B9%98.html"
  },"1": {
    "doc": "Pycharm 설치",
    "title": "Pycharm 다운로드",
    "content": ". | 아래 링크에서 PyCharm Community Edition 다운로드 https://www.jetbrains.com/pycharm/download/ | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Pycharm_%EC%84%A4%EC%B9%98/Pycharm_%EC%84%A4%EC%B9%98.html#pycharm-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Pycharm_%EC%84%A4%EC%B9%98/Pycharm_%EC%84%A4%EC%B9%98.html#pycharm-다운로드"
  },"2": {
    "doc": "Pycharm 설치",
    "title": "Pycharm 설치",
    "content": ". ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Pycharm_%EC%84%A4%EC%B9%98/Pycharm_%EC%84%A4%EC%B9%98.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Pycharm_%EC%84%A4%EC%B9%98/Pycharm_%EC%84%A4%EC%B9%98.html"
  },"3": {
    "doc": "Pycharm 설치",
    "title": "Pycharm 실행",
    "content": ". ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Pycharm_%EC%84%A4%EC%B9%98/Pycharm_%EC%84%A4%EC%B9%98.html#pycharm-%EC%8B%A4%ED%96%89",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Pycharm_%EC%84%A4%EC%B9%98/Pycharm_%EC%84%A4%EC%B9%98.html#pycharm-실행"
  },"4": {
    "doc": "Python 설치",
    "title": "Python 설치",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Python_%EC%84%A4%EC%B9%98/Python_%EC%84%A4%EC%B9%98.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Python_%EC%84%A4%EC%B9%98/Python_%EC%84%A4%EC%B9%98.html"
  },"5": {
    "doc": "Python 설치",
    "title": "Python 다운로드",
    "content": ". | 홈페이지 접속 python.org -&gt; Download -&gt; All releases | Looking for a specific release? 에서 원하는 버전 Download 선택 | Files -&gt; Windows 의 경우 Windows Installer (64-bit) 선택하여 다운로드 | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Python_%EC%84%A4%EC%B9%98/Python_%EC%84%A4%EC%B9%98.html#python-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Python_%EC%84%A4%EC%B9%98/Python_%EC%84%A4%EC%B9%98.html#python-다운로드"
  },"6": {
    "doc": "Python 설치",
    "title": "Python 설치",
    "content": ". | Python 설치 Add python.exe to PATH 를 선택하면 현재 설치하는 버전의 Python 이 환경변수에 설정된다. 설치 완료 시 Disable path length limit 을 선택해준다. 설치 완료 | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Python_%EC%84%A4%EC%B9%98/Python_%EC%84%A4%EC%B9%98.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Python_%EC%84%A4%EC%B9%98/Python_%EC%84%A4%EC%B9%98.html"
  },"7": {
    "doc": "Python 설치",
    "title": "설치 버전 확인",
    "content": ". | 버전 확인 C:\\Users\\ME&gt;python --version Python 3.12.9 . | 설치된 모든 버전 확인 C:\\Users\\ME&gt;py -0 -V:3.13 * Python 3.13 (64-bit) -V:3.12 Python 3.12 (64-bit) . | 설치된 모든 버전과 설치 경로 확인 C:\\Users\\ME&gt;py -0p -V:3.13 * C:\\Users\\ME\\AppData\\Local\\Programs\\Python\\Python313\\python.exe -V:3.12 C:\\Users\\ME\\AppData\\Local\\Programs\\Python\\Python312\\python.exe . | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Python_%EC%84%A4%EC%B9%98/Python_%EC%84%A4%EC%B9%98.html#%EC%84%A4%EC%B9%98-%EB%B2%84%EC%A0%84-%ED%99%95%EC%9D%B8",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/Python_%EC%84%A4%EC%B9%98/Python_%EC%84%A4%EC%B9%98.html#설치-버전-확인"
  },"8": {
    "doc": "추상 팩토리 패턴 - Abstract Factory Pattern",
    "title": "추상 팩토리 패턴 (Abstract Factory Patter)",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/abstract_factory_pattern.html#%EC%B6%94%EC%83%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-abstract-factory-patter",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/abstract_factory_pattern.html#추상-팩토리-패턴-abstract-factory-patter"
  },"9": {
    "doc": "추상 팩토리 패턴 - Abstract Factory Pattern",
    "title": "패턴 개요",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/abstract_factory_pattern.html#%ED%8C%A8%ED%84%B4-%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/abstract_factory_pattern.html#패턴-개요"
  },"10": {
    "doc": "추상 팩토리 패턴 - Abstract Factory Pattern",
    "title": "코드 예제1",
    "content": "Code . from abc import ABC, abstractmethod from typing import Type class VegPizza(ABC): @abstractmethod def prepare(self): pass class NonVegPizza(ABC): @abstractmethod def serve(self): pass class DeluxVeggiePizza(VegPizza): def prepare(self) -&gt; None: print(f\"Prepare: {type(self).__name__}\") class ChikenPizza(NonVegPizza): def serve(self, veg_pizza) -&gt; None: print(f\"{type(self).__name__}, is served with Chicken on {type(veg_pizza).__name__}\") class MexicanVegPizza(VegPizza): def prepare(self) -&gt; None: print(f\"Prepare {type(self).__name__}\") class HamPizza(NonVegPizza): def serve(self, veg_pizza) -&gt; None: print(f\"{type(self).__name__}, is served with Ham on {type(veg_pizza).__name__}\") class PizzaFactory(ABC): @abstractmethod def create_veg_pizza(self) -&gt; Type[VegPizza]: pass @abstractmethod def create_nonveg_pizza(self) -&gt; Type[NonVegPizza]: pass class IndianPizzaFactory(PizzaFactory): def create_veg_pizza(self): return DeluxVeggiePizza() def create_nonveg_pizza(self): return ChikenPizza() class USPizzaFactory(PizzaFactory): def create_veg_pizza(self): return MexicanVegPizza() def create_nonveg_pizza(self): return HamPizza() class PizzaStore: def make_pizzas(self): for factory in [IndianPizzaFactory(), USPizzaFactory()]: factory: PizzaFactory self.non_veg_pizza = factory.create_nonveg_pizza() self.veg_pizza = factory.create_veg_pizza() self.veg_pizza.prepare() self.non_veg_pizza.serve(self.veg_pizza) pizza = PizzaStore() pizza.make_pizzas() . Result . Prepare: DeluxVeggiePizza ChikenPizza, is served with Chicken on DeluxVeggiePizza Prepare MexicanVegPizza HamPizza, is served with Ham on MexicanVegPizza . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/abstract_factory_pattern.html#%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C1",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/abstract_factory_pattern.html#코드-예제1"
  },"11": {
    "doc": "추상 팩토리 패턴 - Abstract Factory Pattern",
    "title": "추상 팩토리 패턴 - Abstract Factory Pattern",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/abstract_factory_pattern.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/abstract_factory_pattern.html"
  },"12": {
    "doc": "행위 패턴",
    "title": "행위 패턴",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%ED%96%89%EC%9C%84%20%ED%8C%A8%ED%84%B4%20-%20Behavioral%20Pattern/behavioral_pattern.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%ED%96%89%EC%9C%84%20%ED%8C%A8%ED%84%B4%20-%20Behavioral%20Pattern/behavioral_pattern.html"
  },"13": {
    "doc": "생성 패턴 - Creational Pattern",
    "title": "생성 패턴 - Creational Pattern",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/creational_pattern.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/creational_pattern.html"
  },"14": {
    "doc": "퍼사드 패턴 - Facade Pattern",
    "title": "퍼사드 패턴 (The Facade Pattern)",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/facade_pattern.html#%ED%8D%BC%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4-the-facade-pattern",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/facade_pattern.html#퍼사드-패턴-the-facade-pattern"
  },"15": {
    "doc": "퍼사드 패턴 - Facade Pattern",
    "title": "구조 디자인 패턴 개요",
    "content": ". | 객체와 클래스를 병합해 더 큰 구조를 만든다. | 개체의 관계를 더 쉽게 식별할 수 있는 디자인 패턴이다. | 클래스 패턴은 상속을 통해 추상화해 인터페이스를 제공하는 반면에 객체 패턴은 한 개의 객체를 더 큰 객체로 확장시킨다. 구조 패턴은 클래스 패턴과 객체 패턴을 합친 패턴이다. | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/facade_pattern.html#%EA%B5%AC%EC%A1%B0-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/facade_pattern.html#구조-디자인-패턴-개요"
  },"16": {
    "doc": "퍼사드 패턴 - Facade Pattern",
    "title": "구조 패턴의 몇 가지 예",
    "content": ". | 어댑터 패턴(The Adapter Pattern): 클라이언트의 요구에 따라 특정 인터페이스를 다른 인터페이스에 맞춘다. 서로 다른 클래스의 인터페이스를 목적에 맞춰 변환한다. | 브릿지 패턴(The Bridge Pattern): 객체의 인터페이스와 구현을 분리해 독립적으로 동작할 수 있게 한다. | 데코레이터 패턴(The Decorator Pattern): 런타임에 객체의 책임을 덧붙인다. 인터페이스를 통해 객체에 속성을 추가한다. | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/facade_pattern.html#%EA%B5%AC%EC%A1%B0-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%AA%87-%EA%B0%80%EC%A7%80-%EC%98%88",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/facade_pattern.html#구조-패턴의-몇-가지-예"
  },"17": {
    "doc": "퍼사드 패턴 - Facade Pattern",
    "title": "퍼사드 디자인 패턴 개요",
    "content": ". | 서브시스템의 인터페이스를 통합시킨 단일 인터페이스를 제공해 클리언트가 쉽게 서브시스템에 접근할 수 있게 한다. | 단일 인터페이스 객체로 복잡한 서브시스템을 대체한다. 서브시스템을 캡슐화하는 것이 아니라 모든 서브시스템들을 결합한다. | 클라이언트와 내부 구현을 분리한다. | . 퍼사드 패턴은 복잡한 서브시스템을 간단한 인터페이스를 통해 제어할 수 있도록 만들어준다. Code . class Hotelier: def __init__(self): print(\"Arranging the Hotel for Marriage?\") def __isAvailable(self): print(\"Is the Hotel free for the event on given day?\") return True def book_hotel(self): if self.__isAvailable(): print(\"Registered the Booking\\n\\n\") class Florist: def __init__(self): print(\"Flower Decorations for the Event? --\") def set_flower_requirement(self): print(\"Carnations, Roses and Lilies would be used for Decorations\\n\\n\") class Caterer: def __init__(self): print(\"Food Arrangements for the Event --\") def set_cuisine(self): print(\"Chinese &amp; Continental Cuisine to be served\\n\\n\") class Musician: def __init__(self): print(\"Musical Arrangements for the Marriage --\") def set_music_type(self): print(\"Jazz and Classical will be played\\n\\n\") class EventManager: def __init__(self): print(\"Event Manager:: Letme talk to the folks\\n\") def arrange(self): self.hotelier = Hotelier() self.hotelier.book_hotel() self.florist = Florist() self.florist.set_flower_requirement() self.caterer = Caterer() self.caterer.set_cuisine() self.musician = Musician() self.musician.set_music_type() class You: def __init__(self): print(\"You:: Whoa! Marriage Arrangements?!!!\") def ask_event_manager(self): print(\"You:: Let's Contact the Event Manager\\n\\n\") em = EventManager() em.arrange() def __del__(self): print(\"You:: Thanks to Event Manager, all preparations done! Phew!\") you = You() you.ask_event_manager() . Result . You:: Whoa! Marriage Arrangements?!!! You:: Let's Contact the Event Manager Event Manager:: Letme talk to the folks Arranging the Hotel for Marriage? Is the Hotel free for the event on given day? Registered the Booking Flower Decorations for the Event? -- Carnations, Roses and Lilies would be used for Decorations Food Arrangements for the Event -- Chinese &amp; Continental Cuisine to be served Musical Arrangements for the Marriage -- Jazz and Classical will be played You:: Thanks to Event Manager, all preparations done! Phew! . You 클래스 (클라이언트) 는 EventManager 를 통해 결혼 준비를 요청한다. EventManager 클래스는 내부적으로 서브시스템 클래스(Hotelier, Florist, Caterer, Musician)를 생성 및 호출하여, 클라이언트가 복잡한 내부 로직을 알 필요 없이 간단한게 이벤트를 진행할 수 있게 한다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/facade_pattern.html#%ED%8D%BC%EC%82%AC%EB%93%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/facade_pattern.html#퍼사드-디자인-패턴-개요"
  },"18": {
    "doc": "퍼사드 패턴 - Facade Pattern",
    "title": "퍼사드 패턴 - Facade Pattern",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/facade_pattern.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/facade_pattern.html"
  },"19": {
    "doc": "팩토리 메소드 패턴 - Factory Method Pattern",
    "title": "팩토리 메소드 패턴 (Factory Method Pattern)",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/factory_method_pattern.html#%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A8%ED%84%B4-factory-method-pattern",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/factory_method_pattern.html#팩토리-메소드-패턴-factory-method-pattern"
  },"20": {
    "doc": "팩토리 메소드 패턴 - Factory Method Pattern",
    "title": "패턴 개요",
    "content": "팩토리 메소드 패턴은 객체를 생성하는 인터페이스르 정의하고 어떤 클래스를 초기화할지는 서브 클래스의 결정을 맡긴다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/factory_method_pattern.html#%ED%8C%A8%ED%84%B4-%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/factory_method_pattern.html#패턴-개요"
  },"21": {
    "doc": "팩토리 메소드 패턴 - Factory Method Pattern",
    "title": "코드 예제1",
    "content": "Code . from abc import ABC, abstractmethod from typing import Dict, Type # Product class Section(ABC): @abstractmethod def describe(self): pass # ConcreteProduct class PersonalSection(Section): def describe(self) -&gt; None: print(\"Personal Section\") class AlbumSection(Section): def describe(self) -&gt; None: print(\"AlbumSection\") class PatentSection(Section): def describe(self) -&gt; None: print(\"Patent Section\") class PublicationSection(Section): def describe(self) -&gt; None: print(\"Publication Section\") # Creator # 프로필을 구성하는 인터페이스를 정의한다. # create_profile() 메서드를 선언하여 하위 클래스가 이를 구현하도록 강제한다. class Profile(ABC): def __init__(self): self.sections = [] self.create_profile() @abstractmethod def create_profile(self): pass def get_sections(self): return self.sections def add_section(self, section): self.sections.append(section) # Profile 하위 클래스를 등록할 딕셔너리 profile_registry: Dict[str, Type[Profile]] = {} # 동적으로 적절한 클래스의 객체를 생성하기 위한 데코레이터 # 클래스의 이름을 key 로, value 로 클래스를 register_profile 에 등록한다. def register_profile(cls: Type[Profile]) -&gt; Type[Profile]: profile_registry[cls.__name__] = cls return cls # ConcreteCreator # Profile 의 구체적인 구현체 # 각각의 클래스는 create_profile() 메서드를 구현하여 자신에게 맞는 Section 을 추가한다. @register_profile class LinkedIn(Profile): def create_profile(self): self.add_section(PersonalSection()) self.add_section(PatentSection()) self.add_section(PublicationSection()) @register_profile class FaceBook(Profile): def create_profile(self): self.add_section(PersonalSection()) self.add_section(AlbumSection()) profile_type = input(\"Which Profile you'd like to create? [LinkedIn or FaceBook]? \").lower() profile = None if profile_type == \"linkedin\": profile = profile_registry[\"LinkedIn\"]() # LinkedIn 객체 생성 elif profile_type == \"facebook\": profile = profile_registry[\"FaceBook\"]() # FaceBook 객체 생성 else: raise ValueError(f\"Unknown Profile Type: {profile_type}\") print(\"Creating Profile..\", type(profile).__name__) print(\"Profile has sections --\", profile.get_sections()) . Result . Which Profile you'd like to create? [LinkedIn or FaceBook]? facebook Creating Profile.. FaceBook Profile has sections -- [&lt;__main__.PersonalSection object at 0x0000024DBA01E210&gt;, &lt;__main__.AlbumSection object at 0x0000024DBA02C590&gt;] . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/factory_method_pattern.html#%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C1",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/factory_method_pattern.html#코드-예제1"
  },"22": {
    "doc": "팩토리 메소드 패턴 - Factory Method Pattern",
    "title": "팩토리 메소드 패턴 - Factory Method Pattern",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/factory_method_pattern.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/factory_method_pattern.html"
  },"23": {
    "doc": "Home",
    "title": "Welcome to github.io",
    "content": "Github Description . ",
    "url": "/#welcome-to-githubio",
    
    "relUrl": "/#welcome-to-githubio"
  },"24": {
    "doc": "Home",
    "title": "Get started now View it on GitHub",
    "content": " ",
    "url": "/#get-started-now-view-it-on-github",
    
    "relUrl": "/#get-started-now-view-it-on-github"
  },"25": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"26": {
    "doc": "보그 패턴 - Borg Pattern",
    "title": "보그 패턴 (Borg Pattern)",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/monostate_pattern.html#%EB%B3%B4%EA%B7%B8-%ED%8C%A8%ED%84%B4-borg-pattern",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/monostate_pattern.html#보그-패턴-borg-pattern"
  },"27": {
    "doc": "보그 패턴 - Borg Pattern",
    "title": "패턴 개요",
    "content": "보그 패턴은 모든 객체가 같은 상태를 공유하는 패턴이다. 이렇게 하면 여러 객체를 생성하면서도 공통의 설정이나 데이터를 유지할 수 있다. 보그 패턴은 모노스테이트 싱글톤 패턴(Monostate Singlton Pattern)이라고 부르기도 한다. __init__ 으로 구현하기 . Code . class Borg: _shared_state = {} def __init__(self): self.x = 1 self.__dict__ = self._shared_state b0 = Borg() b1 = Borg() b0.x = 4 print(b0 is b1) # b0 과 b1 는 서로 다른 객체이다. print(\"Object State 'b0':\", b0.__dict__) print(\"Object State 'b1':\", b1.__dict__) . Result . False Object State 'b0': {'1': '2', 'x': 4} Object State 'b1': {'1': '2', 'x': 4} . __new__ 로 구현하기 . Code . class Borg: _shared_state = {} def __new__(cls, *args, **kwargs): obj = super(Borg, cls).__new__(cls) obj.__dict__ = cls._shared_state return obj . 상속을 통한 상태 분리 . Code . class Borg: _shared_state = {} def __new__(cls, *args, **kwargs): obj = super(Borg, cls).__new__(cls) obj.__dict__ = cls._shared_state return obj class GlobalConfig(Borg): _shared_state = {} # Borg 클래스의 _shared_state 와 분리하기 위함. def __init__(self, config_value = None): # super 함수로 Borg 클래스의 __init__ 메소드를 오바리이딩 # 이렇게 함으로 써 __dict__ 가 올바른 공유 상태로 재할당되게 된다. super().__init__() if config_value is not None: self.config_value = config_value class TestGlobalConfig(GlobalConfig): _shared_state = {} # GlobalConfig 의 _shared_state 와 분리하기 위함 # TestGlobalConfig 는 GlobalConfig 의 속성에 영향을 주지 않음. # Monostate 패턴은 Singleton 보다 유연해 테스트 환경에 사용하기 적합하다. production_config = GlobalConfig(42) print(\"production_config value:\", production_config.config_value) test_config0 = TestGlobalConfig(100) test_config1 = TestGlobalConfig() print(f\"test_config0 value: {test_config0.config_value}\") print(f\"test_config1 value: {test_config1.config_value}\") print(f\"production_config value: {production_config.config_value}\") . Result . production_config value: 42 test_config0 value: 100 test_config1 value: 100 production_config value: 42 . 모킹(Mocking)으로 메소드 오버라이딩 . Code . # Borg 패턴 class Borg: _shared_state = {} def __init__(self): self.__dict__ = self._shared_state # Production 환경에서의 Service class Service(Borg): _shared_state = {} # Production 환경의 공유 상태 def __init__(self): super().__init__() if not hasattr(self, \"data\"): self.data = \"Real Service Data\" def get_data(self): return self.data service = Service() print(\"Production Service Data:\", service.get_data()) # Test 환경에서는 Service 를 상속받아 mocking 한 버전을 생성 class MockService(Service): _shared_state = {} def get_data(self): return \"Mocked Data\" mock_service = MockService() print(f\"Mock Service data: {mock_service.get_data()}\") . Result . Production Service Data: Real Service Data Mock Service data: Mocked Data . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/monostate_pattern.html#%ED%8C%A8%ED%84%B4-%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/monostate_pattern.html#패턴-개요"
  },"28": {
    "doc": "보그 패턴 - Borg Pattern",
    "title": "보그 패턴 - Borg Pattern",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/monostate_pattern.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/monostate_pattern.html"
  },"29": {
    "doc": "프록시 패턴 - Proxy Pattern",
    "title": "프록시 패턴 (Proxy Pattern)",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/proxy_pattern.html#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8C%A8%ED%84%B4-proxy-pattern",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/proxy_pattern.html#프록시-패턴-proxy-pattern"
  },"30": {
    "doc": "프록시 패턴 - Proxy Pattern",
    "title": "패턴 개요",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/proxy_pattern.html#%ED%8C%A8%ED%84%B4-%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/proxy_pattern.html#패턴-개요"
  },"31": {
    "doc": "프록시 패턴 - Proxy Pattern",
    "title": "코드 예제1",
    "content": "Code . class Actor: def __init__(self): self.is_busy = False def occupied(self): self.is_busy = True print(type(self).__name__, \"is occupied with current movie\") def available(self): self.is_busy = False print(type(self).__name__, \"is free for the movie\") def get_status(self): return self.is_busy class Agent: def __init__(self): self.principal = None def work(self): self.actor = Actor() if self.actor.get_status(): self.actor.occupied() else: self.actor.available() agent = Agent() agent.work() . Result . Actor is free for the movie . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/proxy_pattern.html#%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C1",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/proxy_pattern.html#코드-예제1"
  },"32": {
    "doc": "프록시 패턴 - Proxy Pattern",
    "title": "사용 사례",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/proxy_pattern.html#%EC%82%AC%EC%9A%A9-%EC%82%AC%EB%A1%80",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/proxy_pattern.html#사용-사례"
  },"33": {
    "doc": "프록시 패턴 - Proxy Pattern",
    "title": "프록시 패턴 - Proxy Pattern",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/proxy_pattern.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/proxy_pattern.html"
  },"34": {
    "doc": "싱글톤 패턴 - Singleton Pattern",
    "title": "싱글톤 패턴 (Singleton Pattern)",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4-singleton-pattern",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#싱글톤-패턴-singleton-pattern"
  },"35": {
    "doc": "싱글톤 패턴 - Singleton Pattern",
    "title": "패턴 개요",
    "content": ". | 클래스에 대한 단일 객체 생성 | 전역 객체 제공 | 공유된 리소스에 대한 동시 접근 제어 (충돌 방지) | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#%ED%8C%A8%ED%84%B4-%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#패턴-개요"
  },"36": {
    "doc": "싱글톤 패턴 - Singleton Pattern",
    "title": "파이썬 모듈과 비교",
    "content": "파이썬 모듈은 기본적으로 싱글톤이다. | 파이썬 모듈이 임포트 되었는지 확인 | 이미 임포트 된 경우, 해당 모듈의 객체를 반환한다. | 임포트되지 않은 경우 임포트 후 초기화 한다. | 모듈은 인포트와 동시에 초기화된다. | 모듈을 다시 임포트하면 초기화되지 않는다. | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%AA%A8%EB%93%88%EA%B3%BC-%EB%B9%84%EA%B5%90",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#파이썬-모듈과-비교"
  },"37": {
    "doc": "싱글톤 패턴 - Singleton Pattern",
    "title": "코드 예제1 - __new__ 메소드 오버라이딩",
    "content": "Code . # 일반 빈 클래스 class MyClass: pass c0 = MyClass() c1 = MyClass() print(c0 is c1) class Singleton: def __new__(cls): if not hasattr(cls, 'instance'): # 클래스에 instance 속성이 있는지 확인 # 인스턴스가 없으면 __new__ 메소드를 오버라이드 해 객체를 생성한다. cls.instance = super(Singleton, cls).__new__(cls) return cls.instance # 이미 객체가 생성된 경우 해당 인스턴스를 반환한다. s0 = Singleton() s1 = Singleton() print(s0 is s1) . Result . False True . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C1---__new__-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#코드-예제1---__new__-메소드-오버라이딩"
  },"38": {
    "doc": "싱글톤 패턴 - Singleton Pattern",
    "title": "코드 예제2 - 게으른 초기화 (Lazy instantiation)",
    "content": "Code . # Lazy instantiation class Singleton: __instance = None def __init__(self): if Singleton.__instance is None: print(\"__init__ method called..\") else: print(\"Instance already created:\", self.get_instance()) # get_instance 메소드 호출 시에만 인스턴스 생성 @classmethod def get_instance(cls): if not cls.__instance: cls.__instance = Singleton() return cls.__instance s0 = Singleton() # 클래스를 초기화했지만 객체는 생성하지 않는다. s1 = Singleton.get_instance() # 객체 생성 s2 = Singleton.get_instance() s3 = Singleton() print(s0 is s1) print(s1 is s2) print(s2 is s3) . Result . __init__ method called.. __init__ method called.. Instance already created: &lt;__main__.Singleton object at 0x0000017B1AE17B90&gt; False True False . Code . import test_module import test_module as tm print(test_module is tm) . Result . True . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C2---%EA%B2%8C%EC%9C%BC%EB%A5%B8-%EC%B4%88%EA%B8%B0%ED%99%94-lazy-instantiation",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#코드-예제2---게으른-초기화-lazy-instantiation"
  },"39": {
    "doc": "싱글톤 패턴 - Singleton Pattern",
    "title": "코드 예제3 - 메타클래스를 활용하는 방법",
    "content": "Code . class MetaSingleton(type): _instances = {} def __call__(cls, *args, **kwargs): if cls not in cls._instances: cls._instances[cls] = super( MetaSingleton, cls ).__call__(*args, **kwargs) return cls._instances[cls] class Logger(metaclass=MetaSingleton): pass logger0 = Logger() logger1 = Logger() print(logger0 is logger1) . Result . True . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C3---%EB%A9%94%ED%83%80%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#코드-예제3---메타클래스를-활용하는-방법"
  },"40": {
    "doc": "싱글톤 패턴 - Singleton Pattern",
    "title": "코드 예제4",
    "content": "Code . import sqlite3 class MetaSingleton(type): _instances = {} def __call__(cls, *args, **kwargs): if cls not in cls._instances: cls._instances[cls] = super( MetaSingleton, cls ).__call__(*args, **kwargs) return cls._instances[cls] class Database(metaclass=MetaSingleton): connection = None def connect(self): if self.connection is None: self.connection = sqlite3.connect(\"db.sqlite3\") self.cursorobj = self.connection.cursor() return self.cursorobj db0 = Database().connect() db1 = Database().connect() print(db0 is db1) . Result . True . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C4",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#코드-예제4"
  },"41": {
    "doc": "싱글톤 패턴 - Singleton Pattern",
    "title": "코드 예제5",
    "content": "Code . class MetaSingleton(type): _instances = {} def __call__(cls, *args, **kwargs): if cls not in cls._instances: cls._instances[cls] = super( MetaSingleton, cls ).__call__(*args, **kwargs) return cls._instances[cls] class HealthCheck(metaclass=MetaSingleton): def __init__(self): self._servers = [] def add_server(self): self._servers.append(\"Server 1\") self._servers.append(\"Server 2\") self._servers.append(\"Server 3\") self._servers.append(\"Server 4\") def change_server(self): self._servers.pop() self._servers.append(\"Server 5\") health0 = HealthCheck() health1 = HealthCheck() health0.add_server() print(\"Schedule health check for servers (1)..\") for i in range(4): print(\"Checking \", health0._servers[i]) health1.change_server() print(\"Schedule health check for servers (2)..\") for i in range(4): print(\"Checking \", health1._servers[i]) . Result . Schedule health check for servers (1).. Checking Server 1 Checking Server 2 Checking Server 3 Checking Server 4 Schedule health check for servers (2).. Checking Server 1 Checking Server 2 Checking Server 3 Checking Server 5 . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C5",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html#코드-예제5"
  },"42": {
    "doc": "싱글톤 패턴 - Singleton Pattern",
    "title": "싱글톤 패턴 - Singleton Pattern",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EC%83%9D%EC%84%B1%20%ED%8C%A8%ED%84%B4%20-%20Creational%20Pattern/singleton_pattern.html"
  },"43": {
    "doc": "구조 패턴 - Structural Pattern",
    "title": "구조 패턴 - Structural Pattern",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/structural_pattern.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%EA%B5%AC%EC%A1%B0%20%ED%8C%A8%ED%84%B4%20-%20Structural%20Pattern/structural_pattern.html"
  },"44": {
    "doc": "데이터의 연산",
    "title": "데이터의 연산",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html"
  },"45": {
    "doc": "데이터의 연산",
    "title": "개요",
    "content": "이번 섹션에서는 데이터를 다루는 데 필요한 다양한 연산자와 기능을 소개한다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#개요"
  },"46": {
    "doc": "데이터의 연산",
    "title": "산술 연산자 (Arithmetic operators)",
    "content": "산술연산자는 수학적인 연산을 수행하기 위해 사용되는 기호이다. 파이썬의 산술연산자와 기능을 아래 표에 정리해 보았다. | 연산자 | 의미 | 예시 | 결과 | . | + | 덧셈 | 5 + 2 | 7 | . | - | 뺄셈 | 5 - 2 | 3 | . | * | 곱셈 | 5 * 2 | 10 | . | / | 나눗셈 | 5 / 2 | 2.5 | . | // | 몫 | 5 // 2 | 2 | . | % | 나머지 | 5 % 2 | 1 | . | ** | 거듭제곱 | 5 ** 2 | 25 | . 예제 - 문자열의 연산 . 산술 연산은 숫자에만 사용 가능한 것은 아니다. 아래 예제는 문자열과 문자열의 덧셈, 문자열과 숫자를 곱셈하는 예제이다. Code . # 문자열 + 문자열 hello = \"안녕하세요\" some_number = 3 print(hello + hello + hello) print(hello * some_number) print(some_number * hello) . Result . 안녕하세요안녕하세요안녕하세요 안녕하세요안녕하세요안녕하세요 안녕하세요안녕하세요안녕하세요 . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90-arithmetic-operators",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#산술-연산자-arithmetic-operators"
  },"47": {
    "doc": "데이터의 연산",
    "title": "연산자 우선순위",
    "content": "연산자에는 우선순위가 정해져 있다. 산술 연산자의 경우에 ** 이 가장 높은 우선순위를 가지며, *, /, //, % 가 그 다음으로 높으며, +, - 가 가장 낮은 우선순위를 갖는다. 이 외 연산자에 대한 우선순위는 추가 자료 &gt; 연산자 우선순위 를 참고한다. 복잡한 계산 경우 괄호(())를 사용해 그룹화하여 연산자 우선순위를 조금 더 단순화 할 수 있다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#연산자-우선순위"
  },"48": {
    "doc": "데이터의 연산",
    "title": "복합 연산자 (Augmented assignment)",
    "content": "코드의 간결함을 위해 파이썬은 복합 연산자를 지원한다. 변수 &lt;산술연산자&gt;= 식 형태이며 이는 내부적으로 변수 = 변수 &lt;산술연산자&gt; 식 과 동일한 결과를 낳는다. 단, 좌측의 변수는 사전에 정의 되어 있어야 한다. | 연산자 | 의미 | . | **= | 변수의 값에 우측 값을 거듭제곱한 결과를 변수에 대입한다. | . | *= | 변수의 값에 우측 값을 곱한 결과를 변수에 대입한다. | . | /= | 변수의 값을 우측 값으로 나눈 결과를 변수에 대입한다. | . | //= | 변수의 값을 우측 값으로 나눈 결과의 몫을 변수에 대입한다. | . | %= | 변수의 값을 우측 값으로 나눈 결과의 나머지를 변수에 대입한다. | . | += | 변수의 값에 우측 값을 더한 결과를 변수에 대입한다. | . | -= | 변수의 값에서 우측 값을 뺀 결과를 변수에 대입한다. | . 예제 - 복합 연산자 . Code . x = 3 y = 5 print('연산 전:', x) x *= y # x = x * y 와 같다. print(' 연산 후:', x) . Result . 연산 전: 3 연산 후: 15 . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#%EB%B3%B5%ED%95%A9-%EC%97%B0%EC%82%B0%EC%9E%90-augmented-assignment",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#복합-연산자-augmented-assignment"
  },"49": {
    "doc": "데이터의 연산",
    "title": "비교 연산자 (Comparison operators)",
    "content": "비교 연산자는 두 값(또는 객체)을 비교한 결과를 불리언 값(True 또는 False) 로 반환한다. 값, 객체의 동일성, 멤버쉽 테스트로 분류할 수 있다. | 표현 | 의미 | 분류 | . | x &lt; y | x 값이 y 값 보다 작으면 True 를 반환 | 값 | . | x &gt; y | x 값이 y 값 보다 크면 True 를 반환 | 값 | . | x == y | x 값이 y 값과 같으면 True 를 반환 | 값 | . | x &gt;= y | x 값이 y 값 보다 크거나 같으면 True 를 반환 | 값 | . | x &lt;= y | x 값이 y 값 보다 작거나 같으면 True 를 반환 | 값 | . | x != y | x 값이 y 값과 다르면 True 를 반환 | 값 | . | x is y | x 와 y 와 동일한 객체이면 True 를 반환 | 객체의 동일성 | . | x is not y | x 와 y 가 동일한 객체가 아니면 True 를 반환 | 객체의 동일성 | . | x in y | y가 반복 가능한(iterable) 객체일 때, x가 그 멤버 중 하나이면 True를 반환한다. | 멤버쉽 테스트 | . | x not in y | y가 반복 가능한(iterable) 객체일 때, x가 그 멤버에 포함되어 있지 않으면 True를 반환한다. | 멤버쉽 테스트 | . 예제 - 비교 연산자 . Code . a = 3 b = 5 print(\"a = 3\\nb = 5\\n\") print(\"a &lt; b:\", a &lt; b) print(\"a &gt; b:\", a &gt; b) print(\"a == b:\", a == b) print(\"0 &lt; a &lt; 100:\", 0 &lt; a &lt; 100) . Result . a = 3 b = 5 a &lt; b: True a &gt; b: False a == b: False 0 &lt; a &lt; 100: True . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90-comparison-operators",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#비교-연산자-comparison-operators"
  },"50": {
    "doc": "데이터의 연산",
    "title": "논리 연산자 (Boolean operators)",
    "content": "논리 연산자는 피 연산자의 불리언 값을 평가하여, 조건식의 결과를 결정한다. x or y . | x 의 불리언 값이 True 이면 x 를 반환한다. y 는 평가하지 않는다. | x 의 불리언 값이 False 인 경우 y 를 반환한다. | . x and y . | x 의 불리언 값이 False 이면 x 를 반환한다. | x 의 불리언 값이 True 이면 y 를 반환한다. y 는 평가하지 않는다. | . not x . | x 의 불리언 값이 False 이면 True 를 반환한다. | x 의 불리언 값이 True 이면 False 를 반환한다. | . 예제 - 논리 연산자 (표현식) . Code . a = 0 b = 5 print(a and b) print(a or b) print(not a) . Result . 0 5 True . 예제 - 논리 연산자 (비교연산자 포함) . Code . a = 0 b = 5 print((a == 1) and (a &lt; b)) print((a == 1) or (a &lt; b)) print(not (a == 0)) . Result . False True False . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90-boolean-operators",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#논리-연산자-boolean-operators"
  },"51": {
    "doc": "데이터의 연산",
    "title": "데이터의 형 변환",
    "content": "자료형을 다른 형태로 변환하는 것을 형 변환(Type conversion)이라고 한다. 명시적 형 변환 . str, int 등과 같은 클래스를 사용해 명시적으로 자료형을 변환할 수 있다. 예제 - 명시적 형 변환 . Code . user_number = input(\"숫자를 입력해 주세요: \") print(user_number + \" * 3 =\", int(user_number) * 3) . Result . 숫자를 입력해 주세요: 100 100 * 3 = 300 . 암묵적 형 변환 . 서로 다른 자료형 간의 연산에서 자동으로 형 변환이 수행될 수 있다. 예를 들어, 정수와 부동 소수점을 연산하게 되면 정수를 자동으로 부동 소수점으로 변환한뒤 계산한다. 예제 - 암묵적 형 변환 . Code . integer = 3 float_point = 5.0 result = integer + float_point print(result) print(type(result)) . Result . 8.0 &lt;class 'float'&gt; . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%98%95-%EB%B3%80%ED%99%98",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#데이터의-형-변환"
  },"52": {
    "doc": "데이터의 연산",
    "title": "연습문제",
    "content": "연습문제1 . 다음 연산의 결과를 예상해 보십시오. 3 + 2 * -1 ** 2 . 연습문제2 . 터미널에 어떤 결과가 출력될지 예상해 보십시오. a = int(\"10000\") b = int(\"10000\") print(a == b) print(a is b) . 연습문제3 . 터미널에 어떤 결과가 출력될지 예상해 보십시오. a = 0 b = \"3\" if (a == 0) or (a + b): print(a) . 연습문제4 . 사용자로부터 섭씨 온도를 입력받아, 이를 화씨 온도로 변환하는 프로그램을 작성해 보시오. 화씨 온도를 구하는 공식은 다음과 같습니다. 화씨 온도 = (섭씨 온도 * 9/5) + 32 * 섭씨 : celsius * 화씨 : fahrenheit ##### 예시 ##### 섭씨 온도: 44 섭씨 온도 44°C 는 화씨 온도 111.2°F 입니다. ################ . 연습문제5 . 체질량지수(bmi)는 자신의 몸무게(kg)를 키의 제곱(m)으로 나눈 값입니다. 사용자의 몸무게(kg), 키(m) 를 입력받아 체질량지수를 출력하는 프로그램을 만들어 보십시오. ##### 예시 ##### 몸무게(kg) 를 입력하십시오 : 64.3 키(m) 를 입력하십시오 : 1.69 당신의 체질량 지수는 ??? 입니다. ################ 참고 사이트 : https://health.seoulmc.or.kr/healthCareInfo/myBMIPopup.do . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#%EC%97%B0%EC%8A%B5%EB%AC%B8%EC%A0%9C",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#연습문제"
  },"53": {
    "doc": "데이터의 연산",
    "title": "참고 자료",
    "content": ". | 연산자 우선순위 | 복합 연산자 | 비교 연산자 | 논리 연산자 | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98_%EC%97%B0%EC%82%B0.html#참고-자료"
  },"54": {
    "doc": "문자열",
    "title": "문자열 (String)",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#%EB%AC%B8%EC%9E%90%EC%97%B4-string",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#문자열-string"
  },"55": {
    "doc": "문자열",
    "title": "개요",
    "content": "문자열은 문자들이 순서대로 연결되어 있는 구조를 갖는 파이썬 자료형이다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#개요"
  },"56": {
    "doc": "문자열",
    "title": "문자열의 표현",
    "content": "작은 따옴표 또는 큰 따옴표 안에 작성된 데이터는 문자열로 취급한다. 예제 - 문자열의 표현 . Code . string0 = '작은 따옴표 사용' string1 = \"큰 따옴표 사용\" print(string0) print(string1) print(\"작은 따옴표 사용(Type):\", type(string0)) print(\"큰 따옴표 사용(Type):\", type(string1)) . Result . 작은 따옴표 사용 큰 따옴표 사용 작은 따옴표 사용(Type): &lt;class 'str'&gt; 큰 따옴표 사용(Type): &lt;class 'str'&gt; . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%98-%ED%91%9C%ED%98%84",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#문자열의-표현"
  },"57": {
    "doc": "문자열",
    "title": "원시 문자열 (Raw String)",
    "content": "문자열에 백슬래쉬(\\\\)와 같은 특수한 문자를 포함할 때는 이스케이프 시퀀스를 사용해야 한다. 이 것과 관련하여 문자열 입력받기 에서 정리한 바 있다. Windows 에서는 폴더 경로 구분자로 백슬래쉬(\\) 를 사용하므로 이스케이프 시퀀스를 이용해 문자열로 표현하면 가독성이 매우 떨어질 수 있다. 예를 들어, \"C:\\\\Users\\\\user\\\\Documents\\\\Onedrive\\\\문서\\\\002.Work\\\\IT\\\\redhat 문의\" 와 같이 작성해야 한다. 이런 경우 문자열 리터럴 앞에 r 을 붙이면 이스케이프 시퀀스를 무시하고 그대로 표현할 수 있고 가독성 또한 개선된다. 이렇게 문자열 리터럴 앞에 r 을 붙인 것을 원시 문자열(Raw String)이라고 부른다. 예제 - 원시 문자열 . Code . print(\"C:\\\\Users\\\\user\\\\Documents\\\\Onedrive\\\\문서\\\\002.Work\\\\IT\\\\redhat 문의\") print(r\"C:\\Users\\user\\Documents\\Onedrive\\문서\\002.Work\\IT\\redhat 문의\") . Result . C:\\Users\\user\\Documents\\Onedrive\\문서\\002.Work\\IT\\redhat 문의 C:\\Users\\user\\Documents\\Onedrive\\문서\\002.Work\\IT\\redhat 문의 . [!WARNING] 원시 문자열을 사용할 때 문자열 마지막에 백슬래쉬(\\)를 사용하면 에러가 발생한다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#%EC%9B%90%EC%8B%9C-%EB%AC%B8%EC%9E%90%EC%97%B4-raw-string",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#원시-문자열-raw-string"
  },"58": {
    "doc": "문자열",
    "title": "문자열은 대소문자를 구분한다",
    "content": "파이썬의 문자열은 기본적으로 유니코드를 사용하며, 유니코드에서는 영문 대문자, 소문자마다 서로 다른 코드를 부여한다. 따라서 파이썬에서도 문자열의 대소문자를 구분하여 처리한다. Code . print(\"a\" == \"A\") print(\"a 의 유니코드:\", hex(ord(\"a\"))) print(\"A 의 유니코드:\", hex(ord(\"A\"))) . Result . False a 의 유니코드: 0x61 A 의 유니코드: 0x41 . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%EB%8C%80%EC%86%8C%EB%AC%B8%EC%9E%90%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%95%9C%EB%8B%A4",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#문자열은-대소문자를-구분한다"
  },"59": {
    "doc": "문자열",
    "title": "여러줄 출력하기",
    "content": "애국가 가사를 예시로 print 함수 내에서 여러줄을 출력하는 다양한 방법에 대해서 알아본다. 다음 예제들의 결과는 모두 같다. 동해물과 백두산이 마르고 닳도록 하느님이 보우하사 우리나라 만세 무궁화 삼천리 화려강산 대한사람 대한으로 길이 보전하세 . 예제 - 한 줄에 모두 작성 . Code . print(\"동해물과 백두산이 마르고 닳도록\\n하느님이 보우하사 우리나라 만세\\n무궁화 삼천리 화려강산\\n대한사람 대한으로 길이 보전하세\") . 예제 - 삼중 따옴표를 사용하여 여러 줄에 작성 . Code . print(\"\"\" 동해물과 백두산이 마르고 닳도록 하느님이 보우하사 우리나라 만세 무궁화 삼천리 화려강산 대한사람 대한으로 길이 보전하세 \"\"\") . 예제 - 인접한 문자열 리터럴을 사용하여 여러 줄에 작성성 . Code . print( \"동해물과 백두산이 마르고 닳도록\\n\" \"하느님이 보우하사 우리나라 만세\\n\" \"무궁화 삼천리 화려강산\\n\" \"대한사람 대한으로 길이 보전하세\" ) . [!NOTE] 인접한 문자열 연결은 변수나 표현식에는 사용할 수 없다. 즉, ‘ 작은 따옴표 또는 “ 큰 따옴표에만 가능하다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#%EC%97%AC%EB%9F%AC%EC%A4%84-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#여러줄-출력하기"
  },"60": {
    "doc": "문자열",
    "title": "문자열 리터럴에 변수를 포함시키기",
    "content": "파이썬에서 문자열에 변수나 표현식을 포함시키는 방법은 세가지가 있다. % 연산자, str.format() 메소드, f-string 가 있으며 f-string 은 % 연산자나 str.format() 연산자에 비해 비교적 최근에 나온 기능으로 최신 파이썬에서 권장되는 방식이다. f-string 은 f 로 시작하는 문자열 리터럴로 중괄호({}) 안에 변수나 표현식을 직접 작성하면 해당 값이 문자열에 삽입되도록 한다. f-string 리터럴 내부에서 중괄호를 사용하려면 중첩(``)하여 사용하면 된다. 변수) name = '방승호' city = '서울' age = 34 ... 결과) 안녕하세요. 저는 서울에 사는 34 살 방승호입니다. 아래 예제들은 위 박스의 공통 변수를 갖고 같은 결과를 출력한다. 예제 - % 연산자 . Code . print(\"안녕하세요.\\n저는 %s에 사는 %d살%s입 니다.\" % (city, age, name)) . 예제 - str.format() . Code . print(\"안녕하세요.\\n저는 {}에 사는 {}살 {}입니다.\".format(city, age, name)) . 예제 - f-string . Code . print(f\"안녕하세요.\\n저는 {city}에 사는 {age}살 {name}입니다.\") . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%97%90-%EB%B3%80%EC%88%98%EB%A5%BC-%ED%8F%AC%ED%95%A8%EC%8B%9C%ED%82%A4%EA%B8%B0",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#문자열-리터럴에-변수를-포함시키기"
  },"61": {
    "doc": "문자열",
    "title": "f-string 의 유용한 기능들",
    "content": "다음은 f-string 이 제공하는 몇 가지 유용한 기능에 대한 예제이다. 예제 - 날짜 포매팅 . Code . import datetime current_date = datetime.datetime.now() print(f'{current_date:%B %d, %Y}') . Result . February 23, 2025 . 예제 - 표현식 사용 . current_year = 2025 print(f'작년은 {current_year - 1}년 이고, 내년은 {current_year + 1}년 이다.') . 예제 - 폭 조정 . Code . name = '방승호' city = '서울' hobby = '유튜브 감상' header = f\"{'이름':^10}{'주거 지역':^10}{'취미':^10}\" header_line = f\"{'=' * 40:^40}\" contents = f\"{name:^10}{city:^10}{hobby:^10}\" print(header) print(header_line) print(contents) . Result . 이름 주거 지역 취미 ======================================== 방승호 서울 유튜브 감상 . 예제 - 숫자 앞에 패딩 넣기 . Code . file_number = 9 print(f'{file_number:03}') file_numbering += 1 print(f'{file_number:03}') . Result . 009 010 . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#f-string-%EC%9D%98-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EA%B8%B0%EB%8A%A5%EB%93%A4",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#f-string-의-유용한-기능들"
  },"62": {
    "doc": "문자열",
    "title": "참고 자료",
    "content": "f-strings . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html#참고-자료"
  },"63": {
    "doc": "문자열",
    "title": "문자열",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%AC%B8%EC%9E%90%EC%97%B4.html"
  },"64": {
    "doc": "문자열 입력받기",
    "title": "문자열 입력받기",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0.html"
  },"65": {
    "doc": "문자열 입력받기",
    "title": "Input 함수 사용해보기",
    "content": "Code . input(\"이름을 입력해주세요: \") . Result . 이름을 입력해주세요: 방승호 . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0.html#input-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0.html#input-함수-사용해보기"
  },"66": {
    "doc": "문자열 입력받기",
    "title": "입력받은 문자열 합쳐서 출력하기",
    "content": "Code . print(\"저의 이름은 \" + input(\"이름을 입력해주세요: \") + \"입니다.\") . Result . 이름을 입력해주세요: 방승호 저의 이름은 방승호입니다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0.html#%EC%9E%85%EB%A0%A5%EB%B0%9B%EC%9D%80-%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%95%A9%EC%B3%90%EC%84%9C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0.html#입력받은-문자열-합쳐서-출력하기"
  },"67": {
    "doc": "문자열 입력받기",
    "title": "문자열에서 탭 / 개행 / 작은따옴표 / 큰따옴표 / 백슬래쉬 사용하기 (Escape sequences)",
    "content": "문자열 안에서 이스케이프 코드로 탭, 개행, 작은따옴표, 큰따옴표, 백슬래쉬를 사용할 수 있다. 이스케이프 시퀀스는 \\ (백슬래쉬) 로 시작하며 아래 예시 코드와 같이 동작한다. Code . # 탭 (\\t) print(\"이스케이프 시퀀스 탭\\t예제 입니다.\") # 개행 (\\n) print(\"이스케이프 시퀀스\\n개행\\n예제 입니다.\") # 작은 따옴표 (') print(\"이스케이프 시퀀스 \\'작은 따옴표\\' 예제 입니다.\") # 큰 따옴표 (\") print(\"이스케이프 시퀀스 \\\"큰 따옴표\\\" 예제 입니다.\") # 백슬래쉬 print(\"이스케이프 시퀀스 \\\\백슬래쉬\\\\ 예제 입니다.\") . Result . 이스케이프 시퀀스 탭 예제 입니다. 이스케이프 시퀀스 개행 예제 입니다. 이스케이프 시퀀스 '작은 따옴표' 예제 입니다. 이스케이프 시퀀스 \"큰 따옴표\" 예제 입니다. 이스케이프 시퀀스 \\백슬래쉬\\ 예제 입니다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0.html#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%97%90%EC%84%9C-%ED%83%AD--%EA%B0%9C%ED%96%89--%EC%9E%91%EC%9D%80%EB%94%B0%EC%98%B4%ED%91%9C--%ED%81%B0%EB%94%B0%EC%98%B4%ED%91%9C--%EB%B0%B1%EC%8A%AC%EB%9E%98%EC%89%AC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-escape-sequences",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0.html#문자열에서-탭--개행--작은따옴표--큰따옴표--백슬래쉬-사용하기-escape-sequences"
  },"68": {
    "doc": "문자열 입력받기",
    "title": "참조",
    "content": ". | Escape sequences | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0.html#%EC%B0%B8%EC%A1%B0",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0.html#참조"
  },"69": {
    "doc": "문자열 출력하기",
    "title": "문자열 출력하기",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0.html"
  },"70": {
    "doc": "문자열 출력하기",
    "title": "CMD",
    "content": ". | python 프로그램 실행 | print 함수 호출 | 실행 결과 | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0.html#cmd",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0.html#cmd"
  },"71": {
    "doc": "문자열 출력하기",
    "title": "IDLE",
    "content": ". | Windows -&gt; IDLE 검색 -&gt; IDLE (Python …) 실행 | 이 후 CMD [2] 부터와 같음 | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0.html#idle",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0.html#idle"
  },"72": {
    "doc": "문자열 출력하기",
    "title": "Pycharm (IDE)",
    "content": "New Project 클릭 New Project &gt; Pure Python Location 마지막 경로를 ds_python_study 로 변경 후 Create 좌측 네비게이션에 있는 ds_python_study 우클릭 &gt; New &gt; Directory Directory 명을 001_Basic_Input_Output 으로 생성 좌측 네비게이션에 있는 001_Basic_Input_Output 우클릭 &gt; New &gt; File 파일명을 001_문자열_출력하기.py 로 생성 위 캡쳐 처럼 코드 작성 후 ▷ 를 클릭하여 코드 실행 프로그램 하단 터미널에서 코드 실행 결과가 출력된다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0.html#pycharm-ide",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0.html#pycharm-ide"
  },"73": {
    "doc": "문자열 출력하기",
    "title": "기본 함수 사용방법",
    "content": "함수는 특정 작업을 수행하기 위한 코드 모음이다. 함수 이름 뒤에 () 괄호를 붙여 함수를 호출할 수 있다. 함수이름() . () 괄호 안에는 함수 매개변수에 따라 인자를 넣거나 생략할 수 있다. 예를 들어 print 함수의 경우 () 괄호를 비우는 경우 개행이 되고, 인자를 넣으면 print 함수에 의해 처리되어 콘솔 화면에 출력된다. Code . print(\"문장1\") print() print(\"문장2\") . Result . 문장1 문장2 . Pycharm 의 경우 함수의 () 괄호안에 커서를 두고 Ctrl + q 를 입력하면 함수에 대한 도움말(매개변수, 타입 힌트, docstring 등)을 볼 수 있다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0.html#%EA%B8%B0%EB%B3%B8-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0.html#기본-함수-사용방법"
  },"74": {
    "doc": "변수와 자료형",
    "title": "변수와 자료형",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98.html"
  },"75": {
    "doc": "변수 정의하기",
    "title": "변수 정의하기",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98_%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98_%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0.html"
  },"76": {
    "doc": "변수 정의하기",
    "title": "개요",
    "content": "파이썬에서 변수는 값(객체)에 대한 참조 역할을 한다. 변수는 사용하기 전에 미리 어떤 값을 참조할지 정의해야 한다. 예제 - 변수 정의하기 . Code . tomato = \"토마토\" tomato_brix = \"8\" banana = \"바나나\" banana_brix = \"23\" print(tomato + \"의 당도는 평균 \" + tomato_brix + \" brix 입니다.\") print(banana + \"의 당도는 평균 \" + banana_brix + \" brix 입니다.\") . Result . 토마토의 당도는 평균 8 brix 입니다. 바나나의 당도는 평균 23 brix 입니다. 예제 - 한 줄에 여러 변수 정의하기 . 아래 예제는 한 줄에 여러 개의 변수를 정의하는 방법을 보여주며, 이를 언패킹(unpacking)이라고 한다. Code . small_number, large_number = 1, 1_000_000_000 print(\"small_number:\", small_number) print(\"large_number:\", large_number) . Result . small_number: 1 large_number: 1000000000 . 예제 - 정의되지 않은 변수 . 정의되지 않은 변수를 사용하면 NameError가 발생한다. Code . print(my_variable) . Result . Traceback (most recent call last): File \"d:\\pytest.py\", line 1, in &lt;module&gt; print(my_variable) ^^^^^^^^^^^ NameError: name 'my_variable' is not defined . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98_%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0.html#%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98_%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0.html#개요"
  },"77": {
    "doc": "변수 정의하기",
    "title": "변수 이름 짓기",
    "content": "변수 이름 짓기에는 몇 가지 규칙이 있으며, 위반 시 에러가 발생한다. 문법 규칙 . | 영문, 숫자, 밑줄(_)만 사용하며 숫자로 시작하면 안된다. | 변수 이름 사이에 공백이 있으면 안된다. | 파이썬 내장 (built-in) 키워드는 사용할 수 없다. | 대소문자를 구분한다. | . 아래는 변수 이름 관련 규칙 위반 시 발생하는 에러에 대한 몇가지 예제이다. 예제 - 변수 이름 첫 번째 문자가 숫자인 경우 . Code . 0var = 1 . Result . File \"C:\\Users\\ME\\PycharmProjects\\ds_python_study\\003_Variables\\001_변수.py\", line 1 0var = 1 ^ SyntaxError: invalid decimal literal . 예제 - 변수 이름에 특수문자를 사용한 경우 . Code . variable&gt; = 123 . Result . File \"d:\\pytest.py\", line 1 variable&gt; = 123 ^ SyntaxError: invalid syntax . 예제 - 변수 이름을 파이썬 키워드를 사용한 경우 . Code . class = \"High\" . Result . File \"C:\\Users\\ME\\PycharmProjects\\ds_python_study\\003_Variables\\001_변수.py\", line 1 class = High ^ SyntaxError: invalid syntax . 권고 사항 . | 파이썬 내장 변수, 함수, 클래스, 모듈 등은 가급적 사용하면 안된다. | _ 하나로 끝나는 변수는 변수 이름 충돌을 피하기 위해 사용한다. | 변수 이름은 소문자를 사용하고 공백 등 구분이 필요한 경우 _ 를 사용한다. (snake case) | 간결하면서 의미를 알 수 있게 짓는 것이 좋다. un 보다는 username 또는 user_name 이 낫다. | 상수는 모두 대문자로 표기한다. RED = 1 GREEN = 2 BLUE = 3 ORANGE = 4 . | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98_%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0.html#%EB%B3%80%EC%88%98-%EC%9D%B4%EB%A6%84-%EC%A7%93%EA%B8%B0",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98_%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0.html#변수-이름-짓기"
  },"78": {
    "doc": "변수 정의하기",
    "title": "연습 문제",
    "content": "연습 문제1 - 변수 교환하기 . a = 3 b = 5 두 변수 a, b 가 참조하는 값을 교환하시오. 연습 문제2 - 자기 소개 하기 . 이름, 사는 곳, 취미를 입력받아 출력하는 프로그램을 만들어 보시오. 예시) 이름: 방승호 사는 곳: 서울 취미: 유튜브 감상 안녕하세요. 제 이름은 방승호입니다. 서울에 살고 있고, 취미는 유튜브 감상입니다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98_%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0.html#%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98_%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0.html#연습-문제"
  },"79": {
    "doc": "변수 정의하기",
    "title": "참고 자료",
    "content": ". | PEP8 - 작명 컨벤션 (번역) | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98_%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0.html#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EB%B3%80%EC%88%98_%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0.html#참고-자료"
  },"80": {
    "doc": "이스케이프 시퀀스",
    "title": "연산자 우선순위 (Operator precedence)",
    "content": "| Operator | Description | . | \\(expressions...\\),\\[expressions...\\],{key: value...},{expressions...} | Binding or parenthesized expression, list display, dictionary display, set display | . | x[index], x[index:index], x(arguments...), x.attribute | Subscription, slicing, call, attribute reference | . | await x | Await expression | . | ** | Exponentiation | . | +x, -x, ~x | Positive, negative, bitwise NOT | . | *, @, /, //, % | Multiplication, matrix multiplication, division, floor division, remainder | . | +, - | Addition and subtraction | . | &lt;&lt;, &gt;&gt; | Shifts | . | &amp; | Bitwise AND | . | ^ | Bitwise XOR | . | | Bitwise OR | . | in, not in, is, is not, &lt;, &lt;=, &gt;, &gt;=, !=, == | Comparisons, including membership tests and identity tests | . | not x | Boolean NOT | . | and | Boolean AND | . | or | Boolean OR | . | if – else | Conditional expression | . | lambda | Lambda expression | . | := | Assignment expression | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%97%B0%EC%82%B0%EC%9E%90_%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84.html#%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-operator-precedence",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%97%B0%EC%82%B0%EC%9E%90_%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84.html#연산자-우선순위-operator-precedence"
  },"81": {
    "doc": "이스케이프 시퀀스",
    "title": "참조",
    "content": ". | Operator precedence | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%97%B0%EC%82%B0%EC%9E%90_%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84.html#%EC%B0%B8%EC%A1%B0",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%97%B0%EC%82%B0%EC%9E%90_%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84.html#참조"
  },"82": {
    "doc": "이스케이프 시퀀스",
    "title": "이스케이프 시퀀스",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%97%B0%EC%82%B0%EC%9E%90_%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%97%B0%EC%82%B0%EC%9E%90_%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84.html"
  },"83": {
    "doc": "유용한 사이트",
    "title": "유용한 사이트",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html"
  },"84": {
    "doc": "유용한 사이트",
    "title": "Table of Contents",
    "content": ". | 유용한 사이트 . | Table of Contents | 파이썬 공식 홈페이지 | 웹북 | Question | AI | Education | . | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#table-of-contents",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#table-of-contents"
  },"85": {
    "doc": "유용한 사이트",
    "title": "파이썬 공식 홈페이지",
    "content": ". | The Python Standard Library | Python Tutorial | PEP8 - Style Guide for Python Code | Python Download | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%B5%EC%8B%9D-%ED%99%88%ED%8E%98%EC%9D%B4%EC%A7%80",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#파이썬-공식-홈페이지"
  },"86": {
    "doc": "유용한 사이트",
    "title": "웹북",
    "content": ". | 초보자를 위한 파이썬 300제 | 점프 투 파이썬 | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#%EC%9B%B9%EB%B6%81",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#웹북"
  },"87": {
    "doc": "유용한 사이트",
    "title": "Question",
    "content": ". | Stack Overflow | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#question",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#question"
  },"88": {
    "doc": "유용한 사이트",
    "title": "AI",
    "content": ". | deepseek | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#ai",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#ai"
  },"89": {
    "doc": "유용한 사이트",
    "title": "Education",
    "content": ". | reeborg - 로봇 게임 | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#education",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9C%A0%EC%9A%A9%ED%95%9C_%EC%82%AC%EC%9D%B4%ED%8A%B8.html#education"
  },"90": {
    "doc": "이스케이프 시퀀스",
    "title": "이스케이프 시퀀스",
    "content": "| Escape Sequence | Meaning | . | \\&lt;newline&gt; | Backslash and newline ignored | . | \\\\ | Backslash (\\) | . | \\' | Single quote (') | . | \\\" | Double quote (\") | . | \\a | ASCII Bell (BEL) | . | \\b | ASCII Backspace (BS) | . | \\f | ASCII Formfeed (FF) | . | \\n | ASCII Linefeed (LF) | . | \\r | ASCII Carriage Return (CR) | . | \\t | ASCII Horizontal Tab (TAB) | . | \\v | ASCII Vertical Tab (VT) | . | \\ooo | Character with octal value ooo | . | \\xhh | Character with hex value hh | . Escape sequences only recognized in string literals are: . | Escape Sequence | Meaning | . | \\N{name} | Character named name in the Unicode database | . | \\uxxxx | Character with 16-bit hex value xxxx | . | \\Uxxxxxxxx | Character with 32-bit hex value xxxxxxxx | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84_%EC%8B%9C%ED%80%80%EC%8A%A4.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84_%EC%8B%9C%ED%80%80%EC%8A%A4.html"
  },"91": {
    "doc": "입력과 출력",
    "title": "입력과 출력",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5/%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5.html"
  },"92": {
    "doc": "자료형",
    "title": "자료형",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EC%9E%90%EB%A3%8C%ED%98%95.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EC%9E%90%EB%A3%8C%ED%98%95.html"
  },"93": {
    "doc": "자료형",
    "title": "개요",
    "content": "자료형(Data Type)은 프로그래밍 언어에서 데이터를 저장하고 처리하는 방식과 형태를 정의하는 분류 기준이다. 각 자료형은 데이터가 어떻게 표현되고 연산될지를 결정하는 역할을 한다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EC%9E%90%EB%A3%8C%ED%98%95.html#%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EC%9E%90%EB%A3%8C%ED%98%95.html#개요"
  },"94": {
    "doc": "자료형",
    "title": "자료형 확인",
    "content": "객체가 어떤 자료형인지 확인하려면 type 함수를 사용하면 된다. 아래 예제 코드는 정수형(integer), 부동소수점(floating_point), 문자열(string), 리스트(list) 형을 출력한다. 예제 - 자료형 확인 . Code . integer = 5 floating_point = 5.0 string = \"Hello\" list_ = [1, 2, 3, 4] print(\"integer = 5\") print(type(integer)) print(\"\\nfloating_point = 5.0\") print(type(floating_point)) print('\\nstring = \"Hello\"') print(type(string)) print('\\nlist_ = [1, 2, 3, 4]') print(type(list_)) . Result . integer = 5 &lt;class 'int'&gt; floating_point = 5.0 &lt;class 'float'&gt; string = \"Hello\" &lt;class 'str'&gt; list_ = [1, 2, 3, 4] &lt;class 'list'&gt; . 위에 소개한 자료형들은 파이썬 내장 자료형으로, 파이썬 프로그래밍의 기초가 되는 자료형들이다. 변수와 자료형 항목에서는 이들 자료형을 활용하는 방법에 대해 상세히 다룰 예정이다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EC%9E%90%EB%A3%8C%ED%98%95.html#%EC%9E%90%EB%A3%8C%ED%98%95-%ED%99%95%EC%9D%B8",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/%EC%9E%90%EB%A3%8C%ED%98%95.html#자료형-확인"
  },"95": {
    "doc": "주석",
    "title": "주석",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%A3%BC%EC%84%9D/%EC%A3%BC%EC%84%9D.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%A3%BC%EC%84%9D/%EC%A3%BC%EC%84%9D.html"
  },"96": {
    "doc": "주석",
    "title": "개요",
    "content": "코드에 설명이 필요한 경우 주석을 사용한다. 주석은 # 으로 시작하고 코드 실행 시 무시된다. ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%A3%BC%EC%84%9D/%EC%A3%BC%EC%84%9D.html#%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%A3%BC%EC%84%9D/%EC%A3%BC%EC%84%9D.html#개요"
  },"97": {
    "doc": "주석",
    "title": "PEP8 스타일 가이드 요약",
    "content": ". | 코드와 모순되는 주석은 없는 것보다 나쁘다. 코드가 변경될 때 주석도 업데이트 되어야 한다. | 주석은 완전한 문장이어야 한다. 첫번째 단어는 소문자로 시작하는 식별자가 아닌 한 대문자로 시작되어야 한다. | 블록 주석은 일반적으로 완전한 문장으로 구성된 하나 이상의 문단으로 구성되며, 각 문장은 마침표로 끝난다. | 영어권이 아닌 국가의 Python 코더에게: 당신의 언어를 사용하지 않는 사람들이 절대 읽지 않을 것이라고 120% 확신하지 않는 이상 영어로 주석을 작성하십시오. | . 블록 주석 (Block Comment) . | 주석 뒤에 오는 일부 또는 모든 코드에 적용된다. | 적용되는 코드와 동일한 수준의 들여쓰기에서 작성한다. | *# 과 공백 하나로 시작한다. | . 인라인 주석 (Inline Comment) . | 인라인 주석은 문(Statement)와 같은 줄에 있는 주석이다. | 최소 2 칸 공백으로 코드의 문과 구분되어야 한다. | # 과 공백 하나로 시작한다. | 인라인 주석은 최소한으로 사용한다. | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%A3%BC%EC%84%9D/%EC%A3%BC%EC%84%9D.html#pep8-%EC%8A%A4%ED%83%80%EC%9D%BC-%EA%B0%80%EC%9D%B4%EB%93%9C-%EC%9A%94%EC%95%BD",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%A3%BC%EC%84%9D/%EC%A3%BC%EC%84%9D.html#pep8-스타일-가이드-요약"
  },"98": {
    "doc": "주석",
    "title": "예제",
    "content": "# 첫 번째 주석입니다. (블록 주석) spam = 1 # 두 번째 주석입니다. (인라인 주석) text = \"# 이 것은 주석이 아닙니다. 따옴표 안에서 작성되었기 때문입니다.\" . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%A3%BC%EC%84%9D/%EC%A3%BC%EC%84%9D.html#%EC%98%88%EC%A0%9C",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%A3%BC%EC%84%9D/%EC%A3%BC%EC%84%9D.html#예제"
  },"99": {
    "doc": "주석",
    "title": "참조",
    "content": ". | PEP8 한국어 번역 | Pycharm TODO | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%A3%BC%EC%84%9D/%EC%A3%BC%EC%84%9D.html#%EC%B0%B8%EC%A1%B0",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%A3%BC%EC%84%9D/%EC%A3%BC%EC%84%9D.html#참조"
  },"100": {
    "doc": "추가 자료",
    "title": "추가 자료",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C.html"
  },"101": {
    "doc": "파이썬 내장 자료형",
    "title": "파이썬 내장 자료형",
    "content": "| 자료형 | 분류 | . | int | Numeric Types | . | float | Numeric Types | . | complex | Numeric Types | . | bool | Boolean Type | . | list | Sequence Types | . | tuple | Sequence Types | . | range | Sequence Types | . | str | Text Seqence Type | . | bytes | Binary Sequence Types | . | bytearray | Binary Sequence Types | . | momoryview | Binary Sequence Types | . | set | Set Types | . | frozenset | Set Types | . | dict | Mapping Types | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%82%B4%EC%9E%A5_%EC%9E%90%EB%A3%8C%ED%98%95.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%82%B4%EC%9E%A5_%EC%9E%90%EB%A3%8C%ED%98%95.html"
  },"102": {
    "doc": "파이썬 디자인 패턴",
    "title": "파이썬 디자인 패턴",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4.html"
  },"103": {
    "doc": "파이썬 튜토리얼",
    "title": "파이썬 튜토리얼",
    "content": " ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC.html"
  },"104": {
    "doc": "한국어 - 영어",
    "title": "한국어 - 영어",
    "content": "| 한국어 | 영어 |   | . | 객체 | Object |   | . | 논리 연산자 | Boolean operators |   | . | 변수 | Variable |   | . | 복합 연산자 | Augmented assignment |   | . | 비교 연산자 | Comparison operators |   | . | 원시 문자열 | Raw String | o | . | 산술 연산자 | Arithmetic operators |   | . | 자료형 | Data type |   | . | 형 변환 | Type converstion |   | . ",
    "url": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%ED%95%9C%EA%B5%AD%EC%96%B4-%EC%98%81%EC%96%B4.html",
    
    "relUrl": "/docs/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/%EC%B6%94%EA%B0%80_%EC%9E%90%EB%A3%8C/%ED%95%9C%EA%B5%AD%EC%96%B4-%EC%98%81%EC%96%B4.html"
  }
}
